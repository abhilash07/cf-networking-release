<%
    def db_params
      ['username', 'password', 'host', 'port', 'name'].map {|name| "cf_networking.policy_server.database.#{name}"}
    end

    def param_exists? param
      p(param) != ""
    end

    def connection_string_from_db_params
      return "" unless db_params.any? {|p| param_exists?(p)}

      unless db_params.all? {|p| param_exists?(p)}
        raise "all of the following parameters must be specified #{db_params.join(",")}"
      end

      values = db_params.map {|param| p(param)}
      # Note: order of the params is important here, it has to be username, password, host, port, name in that order
      driver = p("cf_networking.policy_server.database.type")
      case driver
      when 'mysql'
        sprintf "%s:%s@tcp(%s:%s)/%s", *values
      when 'postgres'
        sprintf "postgres://%s:%s@%s:%s/%s?sslmode=disable", *values
      else
        raise "unknown driver #{driver}"
      end
    end

    connection_string = p('cf_networking.policy_server.database.connection_string')

    if connection_string != "" && connection_string_from_db_params != ""
       raise "You can only specify 'cf_networking.policy_server.database.connection_string' or '#{db_params.join(",")}'"
    end

    if connection_string == ""
       connection_string = connection_string_from_db_params
    end

    if connection_string == ""
       raise "#{db_params.join(",")} are required fields"
    end

    def cleanup_interval_in_seconds
      minutes = p("cf_networking.policy_server.cleanup_interval")
      if minutes < 1
        raise "'cf_networking.policy_server.cleanup_interval' must be at least 1 minute"
      end
      minutes * 60
    end
%>

<%=
    require 'json'

    toRender = {
      "listen_host" => p("cf_networking.policy_server.listen_host"),
      "listen_port" => p("cf_networking.policy_server.listen_port"),
      "debug_server_host" => p("cf_networking.policy_server.debug_server_host"),
      "debug_server_port" => p("cf_networking.policy_server.debug_server_port"),
      "internal_listen_port" => p("cf_networking.policy_server.internal_listen_port"),
      "uaa_client" => p("cf_networking.policy_server.uaa_client"),
      "uaa_client_secret" => p("cf_networking.policy_server.uaa_client_secret"),
      "uaa_url" => p("cf_networking.policy_server.uaa_url"),
      "uaa_port" => p("cf_networking.policy_server.uaa_port"),
      "cc_url" => p("cf_networking.policy_server.cc_url"),
      "skip_ssl_validation" => p("cf_networking.policy_server.skip_ssl_validation"),
      "database" => {
        "type" => p("cf_networking.policy_server.database.type"),
        "connection_string" => connection_string,
      },
      "tag_length" => p("cf_networking.policy_server.tag_length"),
      "metron_address" => p("cf_networking.policy_server.metron_address"),
      "log_level" => p("cf_networking.policy_server.log_level"),
      "cleanup_interval" => cleanup_interval_in_seconds,

      # hard-coded values, not exposed as bosh spec properties
      "ca_cert_file" => "/var/vcap/jobs/policy-server/config/certs/ca.crt",
      "server_cert_file" => "/var/vcap/jobs/policy-server/config/certs/server.crt",
      "server_key_file" => "/var/vcap/jobs/policy-server/config/certs/server.key",
      "uaa_ca" => "/var/vcap/jobs/policy-server/config/certs/uaa_ca.crt",
    }

    JSON.pretty_generate(toRender)
%>
